# telegram_rss_bot.py
import requests
from bs4 import BeautifulSoup
import schedule
import time
from datetime import datetime
import logging
import json
import os
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TelegramRSSBot:
    def __init__(self, config_path='config.json'):
        self.config_path = config_path
        self.load_config()
        self.processed_links = set()
        self.load_processed_links()
        self.session = requests.Session()
        self.session.verify = False

    def load_config(self):
        try:
            bot_token = os.getenv('BOT_TOKEN')
            chat_id = os.getenv('CHAT_ID')

            if bot_token and chat_id:
                self.config = {
                    "telegram_channel": "https://t.me/s/euro_football_ru",
                    "bot_token": bot_token,
                    "target_chat_id": chat_id,
                    "check_interval_minutes": 30,
                    "schedule_times": ["09:00", "11:00", "13:00", "15:00", "17:00", "19:00", "21:00"]
                }
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            elif os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                self.config = {
                    "telegram_channel": "https://t.me/s/euro_football_ru",
                    "bot_token": "YOUR_BOT_TOKEN_HERE",
                    "target_chat_id": "YOUR_CHAT_ID_HERE",
                    "check_interval_minutes": 30,
                    "schedule_times": ["09:00", "11:00", "13:00", "15:00", "17:00", "19:00", "21:00"]
                }
                logger.info("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            raise

    def load_processed_links(self):
        try:
            if os.path.exists('processed_links.json'):
                with open('processed_links.json', 'r', encoding='utf-8') as f:
                    self.processed_links = set(json.load(f))
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.processed_links)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫: {e}")

    def save_processed_links(self):
        try:
            with open('processed_links.json', 'w', encoding='utf-8') as f:
                json.dump(list(self.processed_links), f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")

    def parse_telegram_channel(self):
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            }

            logger.info(f"üì° –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {self.config['telegram_channel']}")
            response = self.session.get(
                self.config['telegram_channel'],
                headers=headers,
                timeout=30
            )

            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                messages = soup.find_all('div', class_='tgme_widget_message')
                logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                return messages
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []

    def extract_message_data(self, message):
        try:
            text_div = message.find('div', class_='tgme_widget_message_text')
            text = text_div.get_text(strip=True) if text_div else ""

            link_tag = message.find('a', class_='tgme_widget_message_date')
            link = link_tag['href'] if link_tag and 'href' in link_tag.attrs else ""

            photo_div = message.find('a', class_='tgme_widget_message_photo_wrap')
            image_url = None

            if photo_div and 'style' in photo_div.attrs:
                style = photo_div['style']
                if 'background-image:url(' in style:
                    start = style.find('background-image:url(') + 22
                    end = style.find(')', start)
                    image_url = style[start:end]

            return {
                'text': text,
                'link': link,
                'image_url': image_url,
                'has_image': image_url is not None,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def find_latest_news_with_image(self, messages):
        for message in reversed(messages):
            data = self.extract_message_data(message)

            if not data or not data['link']:
                continue

            if data['link'] in self.processed_links:
                continue

            if data['has_image'] and data['image_url']:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {data['link']}")
                return data

        logger.info("üì≠ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    def send_to_telegram(self, news_data):
        try:
            if not news_data['image_url']:
                logger.error("‚ùå –ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return False

            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'}

            image_response = self.session.get(news_data['image_url'], headers=headers, timeout=30)

            if image_response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code}")
                return False

            caption = news_data['text']
            if len(caption) > 900:
                caption = caption[:897] + "..."

            send_url = f"https://api.telegram.org/bot{self.config['bot_token']}/sendPhoto"
            files = {'photo': ('image.jpg', image_response.content)}
            data = {
                'chat_id': self.config['target_chat_id'],
                'caption': caption,
                'parse_mode': 'HTML'
            }

            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
            response = self.session.post(send_url, files=files, data=data, timeout=30)
            result = response.json()

            if response.status_code == 200 and result.get('ok'):
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def process_news(self):
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            messages = self.parse_telegram_channel()
            if not messages:
                return

            news = self.find_latest_news_with_image(messages)
            if news:
                if self.send_to_telegram(news):
                    self.processed_links.add(news['link'])
                    self.save_processed_links()
                    logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {news['link']}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
            else:
                logger.info("üì≠ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def setup_schedule(self):
        for time_str in self.config['schedule_times']:
            schedule.every().day.at(time_str).do(self.process_news)
            logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤—Ä–µ–º—è: {time_str}")

        interval = self.config.get('check_interval_minutes', 30)
        schedule.every(interval).minutes.do(self.process_news)
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç")

    def run_scheduled(self):
        logger.info("üü¢ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        self.setup_schedule()
        self.process_news()

        logger.info("‚è∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        while True:
            schedule.run_pending()
            time.sleep(60)


def main():
    bot = TelegramRSSBot()
    bot.run_scheduled()


if __name__ == "__main__":
    main()